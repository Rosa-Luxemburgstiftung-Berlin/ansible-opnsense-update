# vim: tabstop=2 expandtab shiftwidth=2 softtabstop=2 smartindent nu ft=yaml
---

- name: check ansible version ...
  ansible.builtin.assert:
    that: "ansible_version.full is version_compare(2.11, '>=')"
    msg: "please use min. ansible version 2.11"
  tags: always
  run_once: true

- name: check facts ... real facts and not alternative one!
  ansible.builtin.assert:
    msg: "role requires current ansible-opnsense-facts"
    that:
      - ansible_local.opnsense.core.product_version is defined
      - ansible_local.ansible_opnsense_facts_version is defined
      - ansible_local.ansible_opnsense_facts_version is version_compare('0.2', '>='))
  tags: always

- name: get next available update of core package...
  ansible.builtin.set_fact:
    _core_upgrade_packages: "{{ pkg_upgrade_item.upgrade_packages | selectattr('name', 'equalto', ansible_local.opnsense.core.product_id) }}"

- name: debug _core_upgrade_packages
  ansible.builtin.debug:
    var: _core_upgrade_packages
    verbosity: 1

- name: set unified syntax for opnsense.core.product_version
  ansible.builtin.set_fact:
    opn_current_version: "{{ ansible_local.opnsense.core.product_version.split('_')[0].strip() }}"
    verbosity: 1

- name: opn_current_version
  ansible.builtin.debug:
    var: opn_current_version
    verbosity: 1

- name: force opn_update_desired_version to the lates ...
  ansible.builtin.set_fact:
    opn_update_desired_version: "{{ ansible_local.opnsense.firmware_changelog[-1]['version'] }}"
  when:
    - opn_update_desired_version is not defined
    - opn_update_force | bool

- name: opn_update_desired_version
  ansible.builtin.debug:
    var: opn_update_desired_version
    verbosity: 1

- name: decide if we should run a update
  ansible.builtin.set_fact:
    _opn_update_required: "{{
      (opn_update_desired_version is defined
      and opn_update_desired_version is version_compare(opn_current_version, '>'))
      or (opn_update_force | bool)
      }}"

- name: prepare update ...
  ansible.builtin.include_tasks: update.yml
  when: _opn_update_required|bool

- name: finally send some clacks over the wire, keeping the legacy of Sir Terry Pratchett alive ...
  ansible.builtin.command: "echo 'X-Clacks-Overhead: GNU Terry Pratchett'"
  changed_when: false
  failed_when: false
  register: gnuterrypratchett_return
  when: gnuterrypratchett | default(true)
  check_mode: false
- name: "U: turn the message around at the end of the line and send it back again :: {{ gnuterrypratchett_return.stdout }}"
  ansible.builtin.debug:
    var: gnuterrypratchett_return.stdout
    verbosity: 1
  when: gnuterrypratchett | default(true)

...
