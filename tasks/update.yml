# vim: tabstop=2 expandtab shiftwidth=2 softtabstop=2 smartindent nu ft=yaml
---

- name: check if this is a major update
  ansible.builtin.command: opnsense-update -vR
  changed_when: false
  check_mode: false
  register: _opn_check_major_update

- name: register desired base version
  ansible.builtin.set_fact:
    _opn_update_desired_base: "{{ opn_update_desired_version | split('.') }}"

- name: register major update status based on _opn_update_desired_base
  ansible.builtin.set_fact:
    _opn_major_update: true
  when:
    - (_opn_update_desired_base[0] ~ '.' ~ (_opn_update_desired_base[1] | split('_') | first)) is version_compare(ansible_local.opnsense.core.product_series, '>')

- name: register major update status
  ansible.builtin.set_fact:
    _opn_major_update: "{% if _opn_check_major_update.stdout_lines | length > 0 %}true{% else %}false{% endif %}"
  when:
    - _opn_major_update is undefined or not _opn_major_update

- name: major update require a reboot
  ansible.builtin.set_fact:
    _opn_reboot_required: true
  when: _opn_major_update | bool

- name: check if update requires a reboot
  ansible.builtin.command: /usr/local/opnsense/scripts/firmware/reboot.sh
  changed_when: false
  failed_when: false
  check_mode: false
  register: _opn_check_reboot_required
  when: not _opn_major_update

- name: register reboot required status
  ansible.builtin.set_fact:
    _opn_reboot_required: "{{ not (_opn_check_reboot_required.rc | bool) }}"
  when: not _opn_major_update

- name: debug opn_current_version
  ansible.builtin.debug:
    var: opn_current_version
    verbosity: 1
- name: debug _opn_check_major_update
  ansible.builtin.debug:
    var: _opn_check_major_update
    verbosity: 1
- name: debug _opn_major_update
  ansible.builtin.debug:
    var: _opn_major_update
    verbosity: 1
- name: debug _opn_check_reboot_required
  ansible.builtin.debug:
    var: _opn_check_reboot_required
    verbosity: 1
- name: debug _opn_reboot_required
  ansible.builtin.debug:
    var: _opn_reboot_required
    verbosity: 1

- name: register opnsense version before the update
  ansible.builtin.set_fact:
    _opn_initial_product_version: "{{ ansible_local.opnsense.core.product_version }}"

- name: set reboot_timeout ...
  ansible.builtin.set_fact:
    _opn_reboot_timeout: "
      {%- if _opn_major_update -%}
        {{ opn_update_wait_for_reboot_4_major_upgrade }}
      {%- else -%}
        {{ opn_update_wait_for_reboot_4_minor_upgrade }}
      {%- endif -%}"
  when: _opn_reboot_required

- name: run update
  ansible.builtin.command: /usr/local/etc/rc.firmware
  when: not _opn_reboot_required

- name: "run update and reboot using a reboot_timeout of {{ _opn_reboot_timeout }}s ..."
  ansible.builtin.reboot:
    reboot_command: /usr/local/etc/rc.firmware
    reboot_timeout: "{{ _opn_reboot_timeout }}"
    connect_timeout: 20
  when:
    - _opn_reboot_required
    - not _opn_major_update

- name: debug reboot_command
  ansible.builtin.debug:
    msg: /usr/local/etc/rc.firmware upgrade {{ _opn_update_desired_base[0] }}.{{ _opn_update_desired_base[1] }}
    verbosity: 1

- name: "run upgrade and reboot using a reboot_timeout of {{ _opn_reboot_timeout }}s ..."
  ansible.builtin.reboot:
    reboot_command: /usr/local/etc/rc.firmware upgrade {{ _opn_update_desired_base[0] }}.{{ _opn_update_desired_base[1] }}
    reboot_timeout: "{{ _opn_reboot_timeout }}"
    connect_timeout: 20
  when:
    - _opn_reboot_required
    - _opn_major_update

- name: reload ansible_local facts
  ansible.builtin.setup:
    filter: ansible_local

- name: trumpet the news all ower the town ...
  ansible.builtin.debug:
    msg: "update performed from {{ _opn_initial_product_version }} to {{ ansible_local.opnsense.core.product_version }}"

...
